module.exports.source = [
  '',
  'Realm.Sync.setLogLevel("error");',
  '',
  'let realm;',
  'async function openRealm() {',
  '  const config = {',
  '    schema: [schemas.TaskSchema, schemas.UserSchema, schemas.ProjectSchema],',
  '    sync: {',
  '      ',
  '      // :hide-start:',
  '      // :code-block-start:hide_is_outside_codeblock',
  '      // I should trigger an error',
  '      notInStartCode: true,',
  '      inFinalCode: true,',
  '      // :code-block-end:',
  '      // :hide-end:',
  '',
  '      // :code-block-start:codeblock id has spaces',
  '      // :hide-start:',
  '      // I should trigger a warning',
  '      notInStartCode: true,',
  '      inFinalCode: true,',
  '      // :code-block-end:',
  '      // :hide-end:',
  ' ',
  '      /* :code-block-start:no-code-block-end',
  '      // I should trigger an error',
  '      :hide-start:',
  '      notInStartCode: true,',
  '      inFinalCode: true,',
  '      :hide-end:',
  '*/',
  '    }',
  '   }',
  '}'
]

module.exports.output = 
{
   start: [
     'Realm.Sync.setLogLevel("error");\n',
     '\n',
     'let realm;\n',
     'async function openRealm() {\n',
     '  const config = {\n',
     '    schema: [schemas.TaskSchema, schemas.UserSchema, schemas.ProjectSchema],\n',
     '    sync: {\n',
     '      \n',
     '\n',
     ' \n',
     '      // I should trigger an error',
     '    }\n',
     '   }\n',
     '}\n',
     '\n'
   ],
   final: [
     'Realm.Sync.setLogLevel("error");\n',
     '\n',
     'let realm;\n',
     'async function openRealm() {\n',
     '  const config = {\n',
     '    schema: [schemas.TaskSchema, schemas.UserSchema, schemas.ProjectSchema],\n',
     '    sync: {\n',
     '      \n',
     '      // I should trigger an error',
     '      notInStartCode: true,\n',
     '      inFinalCode: true,\n',
     '\n',
     '      // I should trigger a warning',
     '      notInStartCode: true,\n',
     '      inFinalCode: true,\n',
     ' \n',
     '      // I should trigger an error',
     '      notInStartCode: true,\n',
     '      inFinalCode: true,\n',
     '\n',
     '    }\n',
     '   }\n',
     '}\n',
     '\n'
   ]
 }